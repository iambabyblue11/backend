// App.js import React, { useState, useEffect } from 'react'; import io from 'socket.io-client'; import CryptoJS from 'crypto-js'; const socket = io('http://localhost:3000'); // URL to your backend server function App() { const [messages, setMessages] = useState([]); const [newMessage, setNewMessage] = useState(''); // Listen for encrypted messages from the server useEffect(() => { socket.on('message', (encryptedMessage) => { const decryptedMessage = decryptMessage(encryptedMessage); setMessages((prevMessages) => [...prevMessages, decryptedMessage]); }); }, []); const sendMessage = () => { const encryptedMessage = encryptMessage(newMessage); socket.emit('message', encryptedMessage); setNewMessage(''); }; // Encrypt the message before sending function encryptMessage(message) { return CryptoJS.AES.encrypt(message, 'your-secret-key').toString(); } // Decrypt the message after receiving function decryptMessage(encryptedMessage) { const bytes = CryptoJS.AES.decrypt(encryptedMessage, 'your-secret-key'); return bytes.toString(CryptoJS.enc.Utf8); } return ( <div className="App"> <h1>Encrypted Chat</h1> <div> {messages.map((msg, index) => ( <div key={index}>{msg}</div> ))} </div> <input type="text" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} /> <button onClick={sendMessage}>Send</button> </div> ); } export default App;
